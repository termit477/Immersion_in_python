# –°–æ–∑–¥–∞–π—Ç–µ —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–µ—â–µ–π –¥–ª—è –ø–æ—Ö–æ–¥–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –∏ –∏—Ö –º–∞—Å—Å–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è.
# –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–∞–∫–∏–µ –≤–µ—â–∏ –≤–ª–µ–∑—É—Ç –≤ —Ä—é–∫–∑–∞–∫ –ø–µ—Ä–µ–¥–∞–≤ –µ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≥—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω–æ—Å—Ç—å.
# –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ–¥–∏–Ω –¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. *–í–µ—Ä–Ω–∏—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ —Ä—é–∫–∑–∞–∫–∞.
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ:
# –¢—Ä–∏ –¥—Ä—É–≥–∞ –≤–∑—è–ª–∏ –≤–µ—â–∏ –≤ –ø–æ—Ö–æ–¥. –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á ‚Äî –∏–º—è –¥—Ä—É–≥–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∫–æ—Ä—Ç–µ–∂ –≤–µ—â–µ–π.
# –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:
# * –ö–∞–∫–∏–µ –≤–µ—â–∏ –≤–∑—è–ª–∏ –≤—Å–µ —Ç—Ä–∏ –¥—Ä—É–≥–∞
# * –ö–∞–∫–∏–µ –≤–µ—â–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã, –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —É –æ–¥–Ω–æ–≥–æ –¥—Ä—É–≥–∞
# * –ö–∞–∫–∏–µ –≤–µ—â–∏ –µ—Å—Ç—å —É –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π –∫—Ä–æ–º–µ –æ–¥–Ω–æ–≥–æ –∏ –∏–º—è —Ç–æ–≥–æ, —É –∫–æ–≥–æ –¥–∞–Ω–Ω–∞—è –≤–µ—â—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
# * –î–ª—è —Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏.
#   –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è –Ω–∞ –ª—é–±–æ–µ –±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π.

FRIENDS_IN_EXPEDITION = {'–ê–Ω–¥—Ä–µ–π': {'–í–æ–¥–∞', '–ü–∞–ª–∞—Ç–∫–∞', '–°–ø–∏—á–∫–∏', '–ö–æ—Ç–µ–ª–æ–∫'},
                         '–í–æ–≤–∞': {'–§–æ–Ω–∞—Ä—å', '–†—é–∫–∑–∞–∫', '–ü–∞–ª–∞—Ç–∫–∞', '–í–æ–¥–∞'},
                         '–ö–æ—Å—Ç—è': {'–ü–∞–ª–∞—Ç–∫–∞', '–†–æ–∑–∂–∏–≥', '–ú–∞–Ω–≥–∞–ª', '–§–æ–Ω–∞—Ä—å'}}


def find_joint_item(dict_base: dict) -> dict:
    data_keys = list(dict_base.keys())
    count = 1
    result = dict_base[data_keys[0]]
    while count != len(data_keys):
        result &= dict_base[data_keys[count]]
        count += 1
    return result


def find_unique_item(dict_base: dict) -> dict:
    data_keys = list(dict_base.keys())
    count = 1
    result = dict_base[data_keys[0]]
    while count != len(data_keys):
        result |= dict_base[data_keys[count]]
        count += 1
    return result


# * –ö–∞–∫–∏–µ –≤–µ—â–∏ –µ—Å—Ç—å —É –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π –∫—Ä–æ–º–µ –æ–¥–Ω–æ–≥–æ –∏ –∏–º—è —Ç–æ–≥–æ, —É –∫–æ–≥–æ –¥–∞–Ω–Ω–∞—è –≤–µ—â—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
#  –ü–æ—á—Ç–∏ –¥–æ–¥–µ–ª–∞–ª. –¢–∞–∫ –¥—É–º–∞—é üòÑ

# def find_joint_item_except_one(dict_base: dict) -> dict:
#     data_keys = list(dict_base.keys())
#     count = 1
#     result = dict_base[data_keys[0]]
#     while count != len(data_keys):
#         temp = result
#         result &= dict_base[data_keys[count]]
#         if result == {}:
#             name = data_keys[count]
#             vesch = temp
#             result = temp
#             # fs[data_keys[count]] = temp
#             fs = {data_keys[name]: vesch}
#             return fs
#             continue
#         count += 1

print(f'–í–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –≤—Å–µ—Ö: {find_joint_item(FRIENDS_IN_EXPEDITION)}')
print(f'–í–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —É –æ–¥–Ω–æ–≥–æ –¥—Ä—É–≥–∞ {find_unique_item(FRIENDS_IN_EXPEDITION)}')
